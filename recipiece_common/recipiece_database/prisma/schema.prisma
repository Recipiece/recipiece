// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x", "debian-openssl-3.0.x"]
  previewFeatures = ["postgresqlExtensions"]
}

generator kysely {
  provider = "prisma-kysely"
  output = "../src/prisma/generated/kysely"
  fileName = "index.ts"
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
}

model User {
  @@map("users")

  id Int @id @default(autoincrement())
  created_at DateTime @default(now())
  validated Boolean @default(false)
  username String @unique
  email String @unique
  preferences Json @default("{}")

  recipes Recipe[]
  cookbooks Cookbook[]
  shopping_lists ShoppingList[]
  validation_tokens UserValidationToken[]
  credentials UserCredentials?
  user_access_records UserAccessRecord[]
  user_sessions UserSession[]
  background_jobs BackgroundJob[]
  timers Timer[]
  meal_plans MealPlan[]
  user_push_notification_subscriptions UserPushNotificationSubscription[]
  source_user_kitchen_memberships UserKitchenMembership[] @relation(name: "source_user")
  destination_user_kitchen_memberships UserKitchenMembership[] @relation(name: "destination_user")
}

enum UserKitchenMembershipStatus {
  accepted
  denied
  pending
}

model UserKitchenMembership {
  @@map("user_kitchen_memberships")
  
  id Int @id @default(autoincrement())
  created_at DateTime @default(now())
  source_user_id Int
  source_user User @relation(name: "source_user", fields: [source_user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  destination_user_id Int
  destination_user User @relation(name: "destination_user", fields: [destination_user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  status UserKitchenMembershipStatus

  recipe_shares RecipeShare[]
  shopping_list_shares ShoppingListShare[]

  @@index([status, destination_user_id])
  @@index([status, source_user_id])

  @@unique([source_user_id, destination_user_id])
}

model UserAccessRecord {
  @@map("user_access_records")

  id Int @id @default(autoincrement())
  created_at DateTime @default(now())
  access_levels String[]
  start_date DateTime
  end_date DateTime?

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user_id Int
}

model UserSession {
  @@map("user_sessions")

  id String @id @default(uuid())
  created_at DateTime @default(now())
  scope String

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user_id Int
}

model UserPushNotificationSubscription {
  @@map("user_push_notification_subscriptions")

  id Int @id @default(autoincrement())
  created_at DateTime @default(now())
  subscription_data Json
  device_id String

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user_id Int

  @@unique([user_id, device_id])
}

model UserCredentials {
  @@map("user_credentials")

  id Int @id @default(autoincrement())
  created_at DateTime @default(now())
  password_hash String

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user_id Int @unique
}

model UserValidationToken {
  @@map("user_validation_tokens")

  id String @id @default(uuid())
  created_at DateTime @default(now())
  purpose String

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user_id Int
}

model RecipeShare {
  @@map("recipe_shares")

  id Int @id @default(autoincrement())
  created_at DateTime @default(now())

  recipe_id Int
  recipe Recipe @relation(fields: [recipe_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  user_kitchen_membership_id Int
  user_kitchen_membership UserKitchenMembership @relation(fields: [user_kitchen_membership_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([recipe_id, user_kitchen_membership_id])
}

model Recipe {
  @@map("recipes")

  id Int @id @default(autoincrement())
  created_at DateTime @default(now())
  name String
  description String?
  duration_ms Int?
  servings Int?
  metadata Json?

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user_id Int

  ingredients RecipeIngredient[]
  steps RecipeStep[]
  recipe_cookbook_attachments RecipeCookbookAttachment[]
  meal_plan_items MealPlanItem[]
  scheduled_notifications ScheduledNotification[]
  recipe_shares RecipeShare[]

  @@index([user_id, name])
}

model RecipeIngredient {
  @@map("recipe_ingredients")

  id Int @id @default(autoincrement())
  name String
  unit String?
  amount String?
  order Int

  recipe Recipe @relation(fields: [recipe_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  recipe_id Int
}

model RecipeStep {
  @@map("recipe_steps")

  id Int @id @default(autoincrement())
  content String
  order Int
  duration_ms Int?

  recipe Recipe @relation(fields: [recipe_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  recipe_id Int
}

model Cookbook {
  @@map("cookbooks")

  id Int @id @default(autoincrement())
  user User @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user_id Int

  name String
  description String?
  created_at DateTime @default(now())

  recipe_cookbook_attachments RecipeCookbookAttachment[]
  @@index([user_id, name])
}

model RecipeCookbookAttachment {
  @@map("recipe_cookbook_attachments")

  recipe_id Int
  cookbook_id Int
  
  recipe Recipe @relation(fields: [recipe_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  cookbook Cookbook @relation(fields: [cookbook_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id(name: "id", [recipe_id, cookbook_id])
}

model ShoppingList {
  @@map("shopping_lists")

  id Int @id @default(autoincrement())
  name String
  created_at DateTime @default(now())
  user_id Int

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  shopping_list_items ShoppingListItem[]
  shopping_list_shares ShoppingListShare[]

  @@index([user_id, name])
}

model ShoppingListShare {
  @@map("shopping_list_shares")

  id Int @id @default(autoincrement())
  created_at DateTime @default(now())

  shopping_list_id Int
  shopping_list ShoppingList @relation(fields: [shopping_list_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  user_kitchen_membership_id Int
  user_kitchen_membership UserKitchenMembership @relation(fields: [user_kitchen_membership_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([shopping_list_id, user_kitchen_membership_id])
}

model ShoppingListItem {
  @@map("shopping_list_items")

  id Int @id @default(autoincrement())
  shopping_list_id Int
  completed Boolean @default(false)
  order Int
  content String
  notes String?

  shopping_list ShoppingList @relation(fields: [shopping_list_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}


model KnownIngredient {
  @@map("known_ingredients")

  id Int @id @default(autoincrement())
  created_at DateTime @default(now())

  ingredient_name String @unique
  // base weight
  grams Float
  // base volume
  us_cups Float
  // for unknown
  unitless_amount Float?
  preferred_measure String?
}

model BackgroundJob {
  @@map("background_jobs")

  id String @id @default(uuid())
  created_at DateTime @default(now())
  finished_at DateTime?
  result String @default("pending")
  purpose String
  args Json?

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user_id Int
}

model Timer {
  @@map("timers")

  id Int @id @default(autoincrement())
  created_at DateTime @default(now())
  duration_ms Int

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user_id Int
}

model MealPlan {
  @@map("meal_plans")

  id Int @id @default(autoincrement())
  created_at DateTime @default(now())
  name String

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user_id Int

  meal_plan_items MealPlanItem[]
}

model MealPlanItem {
  @@map("meal_plan_items")
  id Int @id @default(autoincrement())
  created_at DateTime @default(now())

  meal_plan_id Int
  start_date DateTime
  freeform_content String?
  notes String?
  recipe_id Int?
  label String?

  meal_plan MealPlan @relation(fields: [meal_plan_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  recipe Recipe? @relation(fields: [recipe_id], references: [id], onDelete: SetNull, onUpdate: SetNull)
}

model ScheduledNotification {
  @@map("scheduled_notifications")

  id Int @id @default(autoincrement())
  created_at DateTime @default(now())
  to_be_run_at DateTime
  purpose String
  args Json?

  recipe_id Int
  recipe Recipe @relation(fields: [recipe_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
}
